= LockerRoom

{<img src="https://travis-ci.org/grauwoelfchen/locker_room.svg?branch=master" alt="Build Status" />}[http://travis-ci.org/grauwoelfchen/locker_room]
{<img src="https://www.pullreview.com/github/grauwoelfchen/locker_room/badges/master.svg?" alt="Review" />}[https://www.pullreview.com/github/grauwoelfchen/locker_room/reviews/master]
{<img src="https://codeclimate.com/github/grauwoelfchen/locker_room/badges/gpa.svg" />}[https://codeclimate.com/github/grauwoelfchen/locker_room]
{<img src="https://codeclimate.com/github/grauwoelfchen/locker_room/badges/coverage.svg" />}[https://codeclimate.com/github/grauwoelfchen/locker_room/coverage]

Home :: https://github.com/grauwoelfchen/locker_room
Bugs :: https://github.com/grauwoelfchen/locker_room/issues

== Description

LockerRoom is a mountable rails engine that
provides user objects (team, user and mateship) for team application.


== Install

=== setup

TODO ;)

=== migration

  % rake railties:install:migrations
  % rake db:migrate


== Usage

=== routes

  # config/routes.rb
  Rails.application.routes.draw do
    mount LockerRoom::Engine => "/"
  end

  % rake routes
  Routes for LockerRoom::Engine:
                  logout GET    /signout(.:format)                     locker_room/account/sessions#destroy
                         DELETE /signout(.:format)                     locker_room/account/sessions#destroy
                   login GET    /signin(.:format)                      locker_room/account/sessions#new
                         POST   /signin(.:format)                      locker_room/account/sessions#create
            registration GET    /signup(.:format)                      locker_room/account/users#new
                         POST   /signup(.:format)                      locker_room/account/users#create
                    root GET    /                                      locker_room/account/storages#show
     password_recoveries POST   /recovery/password(.:format)           locker_room/recovery/passwords#create
   new_password_recovery GET    /recovery/password(.:format)           locker_room/recovery/passwords#new
  edit_password_recovery GET    /recovery/password/:token(.:format)    locker_room/recovery/passwords#edit {:token=>/[A-z0-9]+/}
       password_recovery PUT    /recovery/password/:token(.:format)    locker_room/recovery/passwords#update {:token=>/[A-z0-9]+/}
                         PATCH  /recovery/password/:token(.:format)    locker_room/recovery/passwords#update {:token=>/[A-z0-9]+/}
               edit_user GET    /settings/user(.:format)               locker_room/settings/users#edit
                    user PATCH  /settings/user(.:format)               locker_room/settings/users#update
                         PUT    /settings/user(.:format)               locker_room/settings/users#update
           edit_password GET    /settings/password(.:format)           locker_room/settings/passwords#edit
                password PATCH  /settings/password(.:format)           locker_room/settings/passwords#update
                         PUT    /settings/password(.:format)           locker_room/settings/passwords#update
               edit_team GET    /settings/team(.:format)               locker_room/settings/teams#edit
                    team PATCH  /settings/team(.:format)               locker_room/settings/teams#update
                         PUT    /settings/team(.:format)               locker_room/settings/teams#update
          subscribe_team GET    /settings/team/subscribe(.:format)     locker_room/settings/teams#subscribe
               team_type GET    /settings/team/type/:type_id(.:format) locker_room/settings/teams#type
       confirm_team_type POST   /settings/team/type/confirm(.:format)  locker_room/settings/teams#confirm_type
                   mates GET    /settings/mates(.:format)              locker_room/settings/mates#index
                         GET    /signin(.:format)                      locker_room/sessions#new
                         POST   /signin(.:format)                      locker_room/sessions#create
                         GET    /signup(.:format)                      locker_room/teams#new
                         POST   /signup(.:format)                      locker_room/teams#create
                         GET    /                                      locker_room/entrance#index


== Test

Testing modules provide +within_subdomain+ with
+login_user+ and +logout_user+ (with subdomain scope support) for controller and integration.

  # test/test_helper.rb

  require "locker_room/testing/helpers"

  class ActiveSupport::Testcase
    include LockerRoom::Testing::FixtureHelpers
  end

  class ActionController::TestCase
    include LockerRoom::Testing::Controller::WardenHelpers
    include LockerRoom::Testing::Controller::SubdomainHelpers
    include LockerRoom::Testing::Controller::AuthenticationHelpers
  end

  class Capybara::Rails::TestCase
    include LockerRoom::Testing::Integration::SubdomainHelpers
    include LockerRoom::Testing::Integration::AuthenticationHelpers
  end

Then set `Capybara.app_host` and default_url_options[:host], if you want.

  # test/test_helper.rb
  Capybara.configure do |config|
    config.app_host = "http://example.org"
  end

  class Capybara::Rails::TestCase
    ...

    def before_setup
      @default_host = locker_room.scope.default_url_options[:host]
      locker_room.scope.default_url_options[:host] = Capybara.app_host
      super
    end

    def after_teardown
      super
      locker_room.scope.default_url_options[:host] = @default_host
    end
  end


== ER diagram

{<img src="https://raw.githubusercontent.com/grauwoelfchen/locker_room/master/doc/er.png" alt="ER diagram" />}[https://github.com/grauwoelfchen/locker_room/blob/master/doc/er.png]


== Changelog

TODO :)


== Development

  % # setup
  % cp .env.sample .env
  % cp Procfile.sample Procfile

  % # prepare (run rails app in test/dummy)
  % bundle exec foreman run app:locker_room:import_types
  % bundle exec foreman run server

  % # test
  % bundle exec foreman run test #=> run `rake test` with environ vars
  % bundle exec foreman run ruby -I.:test test/models/locker_room/team_test.rb -n /xxx/


== License

MIT

See LICENSE[https://github.com/grauwoelfchen/locker_room/blob/master/LICENSE]
